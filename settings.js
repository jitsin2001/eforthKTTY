module.exports={
 "cmd": "1 EMIT CR .S CR WORDS",
 "port": "COM33",
 "baud": 19200,
 "connecting": true,
 "system": "328eforth",
 "lineDelay": 250,
 "log": "3 秒內按 ESC 鍵可進入符式系統  3\u0006\b\b 2\u0006\b\b 1\u0006\b\b 0\u0006\b\b\r\n328eForth DEV0.76\r\n <ok>好</ok>\r\n<inp>ANEW test.f</inp> <ok>好</ok>\r\n<inp>\\ 3456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789</inp> <ok>好</ok>\r\n<inp>: x * 3 .R ;</inp> <ok>好</ok>\r\n<inp>: t BASE @ DECIMAL 8</inp>\r\n<inp>  FOR CR 9 R@ - 8</inp>\r\n<inp>    FOR DUP 9 R@ - x</inp>\r\n<inp>    NEXT DROP</inp>\r\n  NEXT BASE ! ; t\r\n  1  2  3  4  5  6  7  8  9\r\n  2  4  6  8 10 12 14 16 18\r\n  3  6  9 12 15 18 21 24 27\r\n  4  8 12 16 20 24 28 32 36\r\n  5 10 15 20 25 30 35 40 45\r\n  6 12 18 24 30 36 42 48 54\r\n  7 14 21 28 35 42 49 56 63\r\n  8 16 24 32 40 48 56 64 72\r\n  9 18 27 36 45 54 63 72 81 好\r\n\r\u0006:  ��?f{�\u0003�?4�\u0013�j)���S>�gx\u0015��\u000f{����/��4��\u001a�O�5���/o����\u001f�������\r��ϳ�������7=��!����o7?�򿻪��\b�7-���7C��۹a�_�&��M��]�\u0018�\u001c�\u0003�\u0004?\u0003�\u0003�\u00057\u0005>\u0003o\u0003�\u0006�\u0000o\bi\u000b�\rn\b�\u0005P\b�\b��YY��l?';\u001e�[���$\u0013\u000e�R\u0003\u000e��\u0001\u000e�\t\r\u000e��\u0001N\u001c\u000e��\u0002\u000e�U\u001c\f�U\u0000�7\u0006SEALED\u0000\u000e�Z\u0010\u000e��\u0006!ERROR#04 : 禁止移除系統��?<error>\r\nERROR#02</error> : 遇未定義指令!\r\n請按 ESC 繼續 .\u0007\r\n [ 1 EMIT CR .S CR WORDS ]\u0001\r\n <sp\r\n t x test.f dot.f SEALED FORGET I! i! variables .hex .HEX HH PB2_TONE_IO PB1_TONE_IO HZ KHZ TONE_SET PULSEOUT PULSEIN != ANALOGREAD ADLOWBYTE ADHIGHBYTE ADCSRA ADPS128 ADPS64 ADPS32 ADPS16 ADPS8 ADPS4 ADPS2 ADIE ADIF ADATE ADSC ADEN ADMUXSET INTERNAL RESERVED AFRAVCC AREFOFF PD5_PWM_IO PD6_PWM_IO PWM_CLOCK_SELECT PD5_PWM PD6_PWM MS OCR0B OCR0A TCCR0B TCCR0A LOW HIGH OUTPUT INPUT CLR_BITS SET_BITS DIGITALREAD PD PC PB PIN>BITM words INSTR MATCH $EQ SEE (SEE) .BODY .HEAD .INS RADR> RET? RJMP? RCALL? ADR> JMP? CALL? .NAME .BRAN .STR Q H.R A. H. (CON) (.\") ($\") (ABORT\") (BRAN) (ZBRAN) (NEXT) (LIT) INS_RET INS_JUMP INS_CALL DUP_2+_SWAP_I@ LIMIT >LINK .ID $TYPE . SPACE ITYPE TYPE DUP_#OUT_+! 1_#OUT_+! #OUT_+! CR 0_#OUT_! #OUT >name legal_name WAIT ERROR#02 CONSTANT ?KEY KEY DUMP IDUMP ANEW doTABLE Forget (forget) ; : DEPTH_CHECK VARIABLE STOP REMEMBER UTF8 BIG5 NOOP TEST OPEN_INT 'CN VARIABLE CONSTANT CREATE IMMEDIATE : ] ; OVERT $COMPILE $,n ?UNIQUE .\" $\" ABORT\" WHILE ELSE AFT THEN REPEAT AHEAD IF AGAIN UNTIL NEXT FOR BEGIN $,\" LITERAL COMPILE [COMPILE] call, , IALLOT ALLOT D- D+ D> > 2- 2+ 1- 1+ READ WRITE ERASE COLD hi WORDS .ID >NAME .S IDUMP DUMP ' QUIT EVAL ?STACK .OK [ $INTERPRET abort\" ALLOW_BOOT ERR_HANDLING ERROR QUERY EXPECT accept kTAP TAP ^H NAME? find SAME? NAME> WORD TOKEN CHAR \\ ( .( PARSE parse ? . U. U.R .R .\"| $\"| do$ CR ITYPE TYPE SPACES CHARS SPACE KEY NUMBER? DIGIT? DECIMAL HEX str #> SIGN #S # HOLD <# EXTRACT DIGIT FILL UMOVE UPPER CMOVE @EXECUTE TIB PAD HERE ICOUNT COUNT +! PICK DEPTH >CHAR */ */MOD M* * UM* / MOD /MOD M/MOD UM/MOD WITHIN MIN MAX < U< = ABS - DNEGATE NEGATE INVERT + 2DUP 2DROP ROT ?DUP BL ALIGNED 2/ 2* LAST DP CP CONTEXT HLD 'EVAL 'TIB #TIB >IN SPAN TMP BASE 'BOOT doVAR UM+ XOR OR AND 0< OVER SWAP DUP DROP SP! SP@ >R R@ R> C@ C! FLUSH !NEW SWITCH !OLD @OLD FLUSH I! BUF@ BUF? BUFFER IC@ I@ @ ! EXIT EXECUTE branch ?branch next doLIT !IO EMIT ?KEY\r\n<inp>[</inp> <ok>好</ok>\r\n",
 "lastText": ""
}